@model DA_Web.ViewModels.CreateTourRequest

@{
    ViewData["Title"] = "T·∫°o K·∫ø Ho·∫°ch M·ªõi";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var locations = ViewBag.Locations as List<DA_Web.Models.Location> ?? new List<DA_Web.Models.Location>();
    var provinces = new List<string> {
        "An Giang", "B√† R·ªãa - V≈©ng T√†u", "B·∫Øc Giang", "B·∫Øc K·∫°n", "B·∫°c Li√™u", "B·∫Øc Ninh",
        "B·∫øn Tre", "B√¨nh ƒê·ªãnh", "B√¨nh D∆∞∆°ng", "B√¨nh Ph∆∞·ªõc", "B√¨nh Thu·∫≠n", "C√† Mau",
        "C·∫ßn Th∆°", "Cao B·∫±ng", "ƒê√† N·∫µng", "ƒê·∫Øk L·∫Øk", "ƒê·∫Øk N√¥ng", "ƒêi·ªán Bi√™n", "ƒê·ªìng Nai",
        "ƒê·ªìng Th√°p", "Gia Lai", "H√† Giang", "H√† Nam", "H√† N·ªôi", "H√† Tƒ©nh", "H·∫£i D∆∞∆°ng",
        "H·∫£i Ph√≤ng", "H·∫≠u Giang", "H√≤a B√¨nh", "H∆∞ng Y√™n", "Kh√°nh H√≤a", "Ki√™n Giang",
        "Kon Tum", "Lai Ch√¢u", "L√¢m ƒê·ªìng", "L·∫°ng S∆°n", "L√†o Cai", "Long An", "Nam ƒê·ªãnh",
        "Ngh·ªá An", "Ninh B√¨nh", "Ninh Thu·∫≠n", "Ph√∫ Th·ªç", "Ph√∫ Y√™n", "Qu·∫£ng B√¨nh",
        "Qu·∫£ng Nam", "Qu·∫£ng Ng√£i", "Qu·∫£ng Ninh", "Qu·∫£ng Tr·ªã", "S√≥c TrƒÉng", "S∆°n La",
        "T√¢y Ninh", "Th√°i B√¨nh", "Th√°i Nguy√™n", "Thanh H√≥a", "Th·ª´a Thi√™n Hu·∫ø", "Ti·ªÅn Giang",
        "TP H·ªì Ch√≠ Minh", "Tr√† Vinh", "Tuy√™n Quang", "Vƒ©nh Long", "Vƒ©nh Ph√∫c", "Y√™n B√°i"
    };
}

@section Styles {
    <link rel="stylesheet" href="~/styles/Plans/EditPlans.css" asp-append-version="true" />
}

<div class="edit-tour-container">
    <h1>T·∫°o K·∫ø Ho·∫°ch M·ªõi</h1>
    <p class="edit-tour-note">
        T·∫°o l·ªãch tr√¨nh du l·ªãch m·ªõi ƒë·ªÉ ph·ª•c v·ª• kh√°ch h√†ng. L·ªãch tr√¨nh s·∫Ω ƒë∆∞·ª£c xem x√©t v√† ph√™ duy·ªát sau khi t·∫°o.
    </p>

    <form asp-action="CreatePlan" method="post" enctype="multipart/form-data" class="edit-tour-form">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <!-- General Information -->
        <div class="edit-tour-form-group">
            <label asp-for="DepartureFrom">ƒêi·ªÉm kh·ªüi h√†nh <span class="required">*</span></label>
            <select asp-for="DepartureFrom" class="form-control" required>
                <option value="">-- Ch·ªçn ƒëi·ªÉm kh·ªüi h√†nh --</option>
                @foreach (var province in provinces.OrderBy(p => p))
                {
                    <option value="@province">@province</option>
                }
            </select>
            <span asp-validation-for="DepartureFrom" class="text-danger"></span>
        </div>

        <div class="edit-tour-form-group">
            <label asp-for="Destination">T√™n tour <span class="required">*</span></label>
            <input asp-for="Destination" class="form-control" placeholder="VD: Tour kh√°m ph√° Ph√∫ Y√™n 3 ng√†y 2 ƒë√™m" required />
            <span asp-validation-for="Destination" class="text-danger"></span>
        </div>

        <!-- NEW: Date Range Selection -->
        <div class="date-range-section">
            <div class="date-range-inputs">
                <div class="edit-tour-form-group date-input">
                    <label for="StartDate">Ng√†y b·∫Øt ƒë·∫ßu <span class="required">*</span></label>
                    <input type="date" id="StartDate" name="StartDate" class="form-control" required />
                    <span class="text-danger"></span>
                </div>
                <div class="edit-tour-form-group date-input">
                    <label for="EndDate">Ng√†y k·∫øt th√∫c <span class="required">*</span></label>
                    <input type="date" id="EndDate" name="EndDate" class="form-control" required />
                    <span class="text-danger"></span>
                </div>
            </div>
            <div class="date-range-info">
                <div class="info-badge">
                    <span class="info-icon">üìÖ</span>
                    <span class="info-text" id="dateRangeDisplay">Ch·ªçn ng√†y ƒë·ªÉ t√≠nh th·ªùi gian</span>
                </div>
            </div>
        </div>

        <div class="edit-tour-form-group">
            <label asp-for="Duration">Th·ªùi gian <span class="required">*</span></label>
            <input asp-for="Duration" class="form-control" placeholder="T·ª± ƒë·ªông t√≠nh t·ª´ ng√†y ƒë√£ ch·ªçn" readonly required />
            <span asp-validation-for="Duration" class="text-danger"></span>
        </div>

        <div class="edit-tour-form-group">
            <label asp-for="Description">M√¥ t·∫£ <span class="required">*</span></label>
            <textarea asp-for="Description" class="form-control" rows="5" placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ tour..." required></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <!-- Image Upload -->
        <div class="edit-tour-form-group image-upload-container">
            <label asp-for="ImageFile">H√¨nh ·∫£nh ƒë·∫°i di·ªán</label>
            <input asp-for="ImageFile" type="file" class="form-control" accept="image/*" />
            <div class="image-previews">
                <div class="image-preview-wrapper" id="new-image-preview-wrapper" style="display: none;">
                    <h4>H√¨nh ·∫£nh ƒë√£ ch·ªçn</h4>
                    <img id="new-image-preview" src="#" alt="·∫¢nh ƒë√£ ch·ªçn" style="max-width: 300px; max-height: 200px;" />
                </div>
            </div>
        </div>

        <!-- Highlights -->
        <div class="edit-tour-form-section">
            <h3>ƒêi·ªÉm n·ªïi b·∫≠t</h3>
            <div id="highlights-container">
                <div class="edit-tour-highlight-input">
                    <input name="Highlights[0]" class="form-control" placeholder="ƒêi·ªÉm n·ªïi b·∫≠t" />
                    <button type="button" class="remove-btn" onclick="removeItem(this)">X√≥a</button>
                </div>
            </div>
            <button type="button" id="add-highlight-btn" class="add-btn"> Th√™m ƒëi·ªÉm n·ªïi b·∫≠t</button>
        </div>

        <!-- Schedule -->
        <div class="edit-tour-form-section">
            <h3>L·ªãch tr√¨nh</h3>
            <div class="schedule-notice" id="scheduleNotice">
                <span class="notice-icon">‚ÑπÔ∏è</span>
                <span class="notice-text">Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c ƒë·ªÉ t·ª± ƒë·ªông t·∫°o l·ªãch tr√¨nh</span>
            </div>
            <div id="schedule-container">
                <!-- Schedule days will be generated automatically based on date range -->
            </div>
        </div>

        <!-- Includes -->
        <div class="edit-tour-form-section">
            <h3>Gi√° tour bao g·ªìm</h3>
            <div id="includes-container">
                <div class="item-input">
                    <input name="Includes[0]" class="form-control" placeholder="D·ªãch v·ª• bao g·ªìm" value="Xe du l·ªãch ƒë·ªùi m·ªõi m√°y l·∫°nh" />
                    <button type="button" class="remove-btn" onclick="removeItem(this)">X√≥a</button>
                </div>
                <div class="item-input">
                    <input name="Includes[1]" class="form-control" placeholder="D·ªãch v·ª• bao g·ªìm" value="Kh√°ch s·∫°n ti√™u chu·∫©n 3 sao" />
                    <button type="button" class="remove-btn" onclick="removeItem(this)">X√≥a</button>
                </div>
                <div class="item-input">
                    <input name="Includes[2]" class="form-control" placeholder="D·ªãch v·ª• bao g·ªìm" value="C√°c b·ªØa ƒÉn theo ch∆∞∆°ng tr√¨nh" />
                    <button type="button" class="remove-btn" onclick="removeItem(this)">X√≥a</button>
                </div>
                <div class="item-input">
                    <input name="Includes[3]" class="form-control" placeholder="D·ªãch v·ª• bao g·ªìm" value="V√© tham quan" />
                    <button type="button" class="remove-btn" onclick="removeItem(this)">X√≥a</button>
                </div>
                <div class="item-input">
                    <input name="Includes[4]" class="form-control" placeholder="D·ªãch v·ª• bao g·ªìm" value="B·∫£o hi·ªÉm du l·ªãch" />
                    <button type="button" class="remove-btn" onclick="removeItem(this)">X√≥a</button>
                </div>
            </div>
            <button type="button" id="add-include-btn" class="add-btn"> Th√™m d·ªãch v·ª•</button>
        </div>

        <!-- Excludes -->
        <div class="edit-tour-form-section">
            <h3>Gi√° tour kh√¥ng bao g·ªìm</h3>
            <div id="excludes-container">
                <div class="item-input">
                    <input name="Excludes[0]" class="form-control" placeholder="D·ªãch v·ª• kh√¥ng bao g·ªìm" value="Chi ph√≠ c√° nh√¢n" />
                    <button type="button" class="remove-btn" onclick="removeItem(this)">X√≥a</button>
                </div>
                <div class="item-input">
                    <input name="Excludes[1]" class="form-control" placeholder="D·ªãch v·ª• kh√¥ng bao g·ªìm" value="Ti·ªÅn tip cho HDV v√† t√†i x·∫ø" />
                    <button type="button" class="remove-btn" onclick="removeItem(this)">X√≥a</button>
                </div>
            </div>
            <button type="button" id="add-exclude-btn" class="add-btn"> Th√™m d·ªãch v·ª•</button>
        </div>

        <!-- Notes -->
        <div class="edit-tour-form-section">
            <h3>L∆∞u √Ω</h3>
            <div id="notes-container">
                <div class="item-input">
                    <input name="Notes[0]" class="form-control" placeholder="L∆∞u √Ω" value="Mang theo gi·∫•y t·ªù t√πy th√¢n" />
                    <button type="button" class="remove-btn" onclick="removeItem(this)">X√≥a</button>
                </div>
                <div class="item-input">
                    <input name="Notes[1]" class="form-control" placeholder="L∆∞u √Ω" value="L·ªãch tr√¨nh c√≥ th·ªÉ thay ƒë·ªïi t√πy theo th·ªùi ti·∫øt" />
                    <button type="button" class="remove-btn" onclick="removeItem(this)">X√≥a</button>
                </div>
            </div>
            <button type="button" id="add-note-btn" class="add-btn"> Th√™m l∆∞u √Ω</button>
        </div>

        <div class="edit-tour-form-actions">
            <a asp-action="ManagePlans" class="cancel-btn">H·ªßy</a>
            <button type="submit" class="submit-btn">T·∫°o K·∫ø Ho·∫°ch</button>
        </div>
    </form>
</div>

<!-- Templates -->
<template id="highlight-template">
    <div class="edit-tour-highlight-input">
        <input type="text" name="Highlights[__index__]" class="form-control" placeholder="ƒêi·ªÉm n·ªïi b·∫≠t" />
        <button type="button" class="remove-btn" onclick="removeItem(this)">X√≥a</button>
    </div>
</template>

<template id="include-template">
    <div class="item-input">
        <input type="text" name="Includes[__index__]" class="form-control" placeholder="D·ªãch v·ª• bao g·ªìm" />
        <button type="button" class="remove-btn" onclick="removeItem(this)">X√≥a</button>
    </div>
</template>

<template id="exclude-template">
    <div class="item-input">
        <input type="text" name="Excludes[__index__]" class="form-control" placeholder="D·ªãch v·ª• kh√¥ng bao g·ªìm" />
        <button type="button" class="remove-btn" onclick="removeItem(this)">X√≥a</button>
    </div>
</template>

<template id="note-template">
    <div class="item-input">
        <input type="text" name="Notes[__index__]" class="form-control" placeholder="L∆∞u √Ω" />
        <button type="button" class="remove-btn" onclick="removeItem(this)">X√≥a</button>
    </div>
</template>

<template id="activity-template">
    <div class="activity-input">
        <input type="text" name="Schedules[__dayIndex__].Activities[__activityIndex__]" class="form-control" placeholder="M√¥ t·∫£ ho·∫°t ƒë·ªông" />
        <button type="button" class="remove-btn" onclick="removeItem(this)">X√≥a</button>
    </div>
</template>

<template id="schedule-day-template">
    <div class="schedule-day">
        <div class="day-header">
            <h4>Ng√†y __dayNumber__ - __dateDisplay__</h4>
            <button type="button" class="remove-btn" onclick="removeScheduleDay(this)" style="display:none;">X√≥a ng√†y</button>
        </div>
        <input type="hidden" name="Schedules[__dayIndex__].Day" value="Ng√†y __dayNumber__" />
        <div class="form-group">
            <label>Ti√™u ƒë·ªÅ ng√†y <span class="required">*</span></label>
            <input type="text" name="Schedules[__dayIndex__].Title" class="form-control day-title-input" placeholder="VD: Kh√°m ph√° Tuy H√≤a" required />
            <small class="text-muted location-hint">Ch·ªçn ƒë·ªãa ƒëi·ªÉm b√™n d∆∞·ªõi ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ</small>
        </div>
        <div class="form-group">
            <label>ƒê·ªãa ƒëi·ªÉm cho ng√†y __dayNumber__</label>
            <select name="Schedules[__dayIndex__].LocationIds" class="form-control location-select" multiple="multiple" data-day-index="__dayIndex__">
                <!-- Locations will be populated by JavaScript -->
            </select>
            <small class="text-muted">Gi·ªØ Ctrl ƒë·ªÉ ch·ªçn nhi·ªÅu ƒë·ªãa ƒëi·ªÉm</small>
        </div>
        <div class="form-group mt-2">
            <label>Ho·∫°t ƒë·ªông trong ng√†y</label>
            <div class="activities-container">
                <div class="activity-input">
                    <input type="text" name="Schedules[__dayIndex__].Activities[0]" class="form-control" placeholder="M√¥ t·∫£ ho·∫°t ƒë·ªông" />
                    <button type="button" class="remove-btn" onclick="removeItem(this)">X√≥a</button>
                </div>
            </div>
            <button type="button" class="add-btn add-activity-btn"> Th√™m ho·∫°t ƒë·ªông</button>
        </div>
    </div>
</template>

@section Scripts {
    <script>
        // Store locations data globally
        var allLocations = [];

        // Initialize locations from server data
        @if (locations != null && locations.Any())
        {
            <text>
                try {
                    allLocations = @Html.Raw(Json.Serialize(locations.Select(l => new
                    {
                        id = l.Id,
                        name = l.Name
                    })));
                    console.log("‚úÖ Locations loaded successfully:", allLocations.length);
                } catch (e) {
                    console.error("‚ùå Error loading locations:", e);
                    allLocations = [];
                }
            </text>
        }

        document.addEventListener('DOMContentLoaded', function() {
            console.log("=== CREATE PLAN INITIALIZATION ===");

            // Date range handling
            const startDateInput = document.getElementById('StartDate');
            const endDateInput = document.getElementById('EndDate');
            const durationInput = document.getElementById('Duration');
            const dateRangeDisplay = document.getElementById('dateRangeDisplay');
            const scheduleContainer = document.getElementById('schedule-container');
            const scheduleNotice = document.getElementById('scheduleNotice');

            // Set min date to today
            const today = new Date().toISOString().split('T')[0];
            if (startDateInput) startDateInput.min = today;
            if (endDateInput) endDateInput.min = today;

            // Date change handlers
            function handleDateChange() {
                const startDate = startDateInput.value ? new Date(startDateInput.value) : null;
                const endDate = endDateInput.value ? new Date(endDateInput.value) : null;

                if (startDate && endDate && startDate <= endDate) {
                    // Calculate duration
                    const diffTime = Math.abs(endDate - startDate);
                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
                    const nights = diffDays - 1;

                    // Update duration field
                    durationInput.value = `${diffDays} ng√†y ${nights} ƒë√™m`;

                    // Update date range display
                    const startStr = startDate.toLocaleDateString('vi-VN');
                    const endStr = endDate.toLocaleDateString('vi-VN');
                    dateRangeDisplay.textContent = `${startStr} - ${endStr} (${diffDays} ng√†y ${nights} ƒë√™m)`;

                    // Generate schedule days
                    generateScheduleDays(startDate, diffDays);

                    // Hide notice
                    scheduleNotice.style.display = 'none';
                } else {
                    durationInput.value = '';
                    dateRangeDisplay.textContent = 'Ch·ªçn ng√†y ƒë·ªÉ t√≠nh th·ªùi gian';
                    scheduleContainer.innerHTML = '';
                    scheduleNotice.style.display = 'flex';
                }
            }

            // Update end date min when start date changes
            if (startDateInput) {
                startDateInput.addEventListener('change', function() {
                    if (this.value) {
                        endDateInput.min = this.value;
                        if (endDateInput.value && endDateInput.value < this.value) {
                            endDateInput.value = this.value;
                        }
                    }
                    handleDateChange();
                });
            }

            if (endDateInput) {
                endDateInput.addEventListener('change', handleDateChange);
            }

            // Generate schedule days based on date range
            function generateScheduleDays(startDate, numDays) {
                scheduleContainer.innerHTML = '';

                for (let i = 0; i < numDays; i++) {
                    const currentDate = new Date(startDate);
                    currentDate.setDate(startDate.getDate() + i);

                    const template = document.getElementById('schedule-day-template');
                    let newHtml = template.innerHTML
                        .replace(/__dayIndex__/g, i)
                        .replace(/__dayNumber__/g, i + 1)
                        .replace(/__dateDisplay__/g, currentDate.toLocaleDateString('vi-VN', {
                            weekday: 'long',
                            day: 'numeric',
                            month: 'numeric',
                            year: 'numeric'
                        }));

                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = newHtml;
                    const newDayElement = tempDiv.firstElementChild;

                    // Populate locations
                    const locationSelect = newDayElement.querySelector('select[name*="LocationIds"]');
                    if (locationSelect && allLocations && allLocations.length > 0) {
                        locationSelect.innerHTML = '';
                        allLocations.forEach(location => {
                            if (location && location.id && location.name) {
                                const option = document.createElement('option');
                                option.value = location.id;
                                option.textContent = location.name;
                                locationSelect.appendChild(option);
                            }
                        });

                        // Add change event listener for location selection
                        locationSelect.addEventListener('change', function() {
                            updateDayTitle(this);
                        });
                    }

                    scheduleContainer.appendChild(newDayElement);

                    // Setup activity button
                    const addActivityBtn = newDayElement.querySelector('.add-activity-btn');
                    if (addActivityBtn) {
                        addActivityBtn.addEventListener('click', addActivityHandler);
                    }
                }
            }

            // Update day title based on selected locations
            function updateDayTitle(selectElement) {
                const dayDiv = selectElement.closest('.schedule-day');
                const titleInput = dayDiv.querySelector('.day-title-input');
                const selectedOptions = Array.from(selectElement.selectedOptions);

                if (selectedOptions.length > 0) {
                    const locationNames = selectedOptions.map(opt => opt.textContent);
                    let title = '';

                    if (locationNames.length === 1) {
                        title = `Kh√°m ph√° ${locationNames[0]}`;
                    } else if (locationNames.length === 2) {
                        title = `${locationNames[0]} - ${locationNames[1]}`;
                    } else {
                        title = `${locationNames[0]} v√† ${locationNames.length - 1} ƒë·ªãa ƒëi·ªÉm kh√°c`;
                    }

                    titleInput.value = title;
                    titleInput.classList.add('auto-filled');
                }
            }

            // Image preview functionality
            const imageFileInput = document.getElementById('ImageFile');
            if (imageFileInput) {
                imageFileInput.addEventListener('change', function(event) {
                    const [file] = event.target.files;
                    if (file) {
                        const previewWrapper = document.getElementById('new-image-preview-wrapper');
                        const previewImg = document.getElementById('new-image-preview');

                        const reader = new FileReader();
                        reader.onload = function(e) {
                            previewImg.src = e.target.result;
                            previewWrapper.style.display = 'block';
                        };
                        reader.readAsDataURL(file);
                    }
                });
            }

            // Generic add button setup
            function setupAddButton(buttonId, containerId, templateId) {
                const addButton = document.getElementById(buttonId);
                if (addButton) {
                    addButton.addEventListener('click', function() {
                        const container = document.getElementById(containerId);
                        const template = document.getElementById(templateId);
                        const index = container.children.length;

                        const newHtml = template.innerHTML.replace(/__index__/g, index);
                        container.insertAdjacentHTML('beforeend', newHtml);
                    });
                }
            }

            // Setup add buttons
            setupAddButton('add-highlight-btn', 'highlights-container', 'highlight-template');
            setupAddButton('add-include-btn', 'includes-container', 'include-template');
            setupAddButton('add-exclude-btn', 'excludes-container', 'exclude-template');
            setupAddButton('add-note-btn', 'notes-container', 'note-template');

            // Activity handler
            function addActivityHandler(event) {
                event.preventDefault();
                const dayDiv = event.target.closest('.schedule-day');
                const activitiesContainer = dayDiv.querySelector('.activities-container');
                const activityTemplate = document.getElementById('activity-template');

                const scheduleContainer = document.getElementById('schedule-container');
                const dayIndex = Array.from(scheduleContainer.children).indexOf(dayDiv);
                const activityIndex = activitiesContainer.children.length;

                let newHtml = activityTemplate.innerHTML
                    .replace(/__dayIndex__/g, dayIndex)
                    .replace(/__activityIndex__/g, activityIndex);

                activitiesContainer.insertAdjacentHTML('beforeend', newHtml);
            }

            // Global remove functions
            window.removeItem = function(button) {
                const itemToRemove = button.closest('.edit-tour-highlight-input, .item-input, .activity-input');
                if (itemToRemove) {
                    const container = itemToRemove.parentElement;
                    itemToRemove.remove();
                    reindexContainer(container);
                }
            }

            window.removeScheduleDay = function(button) {
                // Schedule days are auto-generated, so we don't allow removal
                alert('L·ªãch tr√¨nh ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông d·ª±a tr√™n ng√†y ƒë√£ ch·ªçn. Vui l√≤ng thay ƒë·ªïi ng√†y b·∫Øt ƒë·∫ßu/k·∫øt th√∫c ƒë·ªÉ ƒëi·ªÅu ch·ªânh s·ªë ng√†y.');
            }

            // Reindex functions
            function reindexContainer(container) {
                if (!container || !container.children.length) return;

                const firstInput = container.querySelector('input, textarea, select');
                if (!firstInput) return;

                const baseName = firstInput.name.replace(/\[\d+\].*/, '');

                Array.from(container.children).forEach((item, index) => {
                    const inputs = item.querySelectorAll('input, textarea, select');
                    inputs.forEach(input => {
                        const suffix = input.name.substring(input.name.indexOf(']') + 1);
                        input.name = `${baseName}[${index}]${suffix}`;
                    });
                });
            }

            console.log("=== CREATE PLAN READY ===");
        });
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}