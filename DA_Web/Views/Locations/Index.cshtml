@using DA_Web.Models.Enums


@model IEnumerable<DA_Web.Models.Location>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="locations-page">
    <!-- Hero Section -->
    <div class="locations-hero">
        <div class="locations-hero-overlay"></div>
        <div class="locations-hero-content">
            <h1 class="hero-title">Khám Phá Phú Yên</h1>
            <p class="hero-subtitle">Những trải nghiệm tuyệt vời đang chờ đón bạn</p>
        </div>
    </div>

    <div class="locations-container">
        <!-- Search and Filters -->
        <div class="locations-filters">
            <div class="filter-search">
                <input type="text" id="searchInput" class="search-input" placeholder="Tìm kiếm địa điểm...">
                <button class="clear-search d-none" id="clearSearch">
                    <i class="bi bi-x"></i>
                </button>
            </div>
            <div class="filter-categories">
                <button class="filter-btn active" data-filter="all">
                    <i class="bi bi-grid"></i>Tất cả
                </button>
                <button class="filter-btn" data-filter="bãi biển">
                    <i class="bi bi-water"></i>Bãi biển
                </button>
                <button class="filter-btn" data-filter="thiên nhiên">
                    <i class="bi bi-mountains"></i>Thiên nhiên
                </button>
                <button class="filter-btn" data-filter="di tích">
                    <i class="bi bi-building"></i>Di tích
                </button>
                <button class="filter-btn" data-filter="văn hóa">
                    <i class="bi bi-people"></i>Văn hóa
                </button>
            </div>
        </div>

        <!-- Results Section -->
        <div class="locations-results">
            <div class="results-header">
                <p class="results-count">
                    Đang hiển thị <span id="currentCount">@Model.Count()</span> trong số <span id="totalCount">@Model.Count()</span> địa điểm
                </p>
            </div>

            <div class="locations-grid" id="locationsGrid">
                @foreach (var location in Model)
                {
                    <div class="location-card-wrapper" data-type="@location.Type?.ToLower()">
                        <a href="@Url.Action("Details", new { id = location.Id })" class="location-card">
                            <div class="location-card-media">
                                @{
                                    var introImage = location.LocationImages?.FirstOrDefault(img => img.ImageType == LocationImageType.introduction);
                                    var imageUrl = introImage != null ? introImage.ImageUrl : "~/images/default-location.jpg";
                                }
                                <div class="location-card-image">
                                    <img src="@Url.Content(imageUrl)" alt="@location.Name">
                                </div>
                                @if (!string.IsNullOrEmpty(location.Type))
                                {
                                    <span class="location-card-badge">
                                        <i class="bi @(location.Type.ToLower() switch {
                                            "Bãi biển" => "bi-water",
                                            "Thiên nhiên" => "bi-mountains",
                                            "di tích" => "bi-building",
                                            _ => "bi-geo-alt"
                                        })"></i>
                                        @location.Type
                                    </span>
                                }
                                <div class="location-card-overlay"></div>
                            </div>
                            <div class="location-card-content">
                                <h3 class="location-card-title">@(location.Name ?? "Chưa có tiêu đề")</h3>
                                <p class="location-card-description">
                                    @if (location.LocationDetail?.Subtitle != null)
                                    {
                                        @(location.LocationDetail.Subtitle.Length > 100 
                                            ? location.LocationDetail.Subtitle.Substring(0, 97) + "..." 
                                            : location.LocationDetail.Subtitle)
                                    }
                                    else
                                    {
                                        @("Khám phá vẻ đẹp tiềm ẩn tại đây.")
                                    }
                                </p>
                                <div class="location-card-action">
                                    <span>Khám phá</span>
                                    <i class="bi bi-arrow-right"></i>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            </div>

            <!-- Empty State -->
            <div class="locations-empty d-none" id="emptyState">
                <i class="bi bi-map"></i>
                <h3>Không tìm thấy địa điểm nào</h3>
                <p>Không có địa điểm nào phù hợp với tìm kiếm của bạn. Vui lòng thử lại với từ khóa hoặc bộ lọc khác.</p>
                <button class="reset-filter-btn" id="resetFilters">
                    <i class="bi bi-arrow-repeat"></i> Đặt lại bộ lọc
                </button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link href="@Url.Content("~/styles/Location/LocationList.css")" rel="stylesheet" />
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('searchInput');
            const clearSearchBtn = document.getElementById('clearSearch');
            const filterBtns = document.querySelectorAll('.filter-btn');
            const locationsGrid = document.getElementById('locationsGrid');
            const emptyState = document.getElementById('emptyState');
            const resetFiltersBtn = document.getElementById('resetFilters');
            const currentCountSpan = document.getElementById('currentCount');
            const cards = document.querySelectorAll('.location-card-wrapper');

            function updateResults() {
                const searchTerm = searchInput.value.toLowerCase();
                const activeFilter = document.querySelector('.filter-btn.active').dataset.filter;
                let visibleCount = 0;

                cards.forEach(card => {
                    const title = card.querySelector('.location-card-title').textContent.toLowerCase();
                    const description = card.querySelector('.location-card-description').textContent.toLowerCase();
                    const type = card.dataset.type;
                    
                    const matchesSearch = title.includes(searchTerm) || description.includes(searchTerm);
                    const matchesFilter = activeFilter === 'all' || type === activeFilter;

                    if (matchesSearch && matchesFilter) {
                        card.style.display = 'block';
                        visibleCount++;
                    } else {
                        card.style.display = 'none';
                    }
                });

                currentCountSpan.textContent = visibleCount;
                emptyState.classList.toggle('d-none', visibleCount > 0);
                locationsGrid.classList.toggle('d-none', visibleCount === 0);
            }

            searchInput.addEventListener('input', function() {
                clearSearchBtn.classList.toggle('d-none', !this.value);
                updateResults();
            });

            clearSearchBtn.addEventListener('click', function() {
                searchInput.value = '';
                clearSearchBtn.classList.add('d-none');
                updateResults();
            });

            filterBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    filterBtns.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    updateResults();
                });
            });

            resetFiltersBtn.addEventListener('click', function() {
                searchInput.value = '';
                clearSearchBtn.classList.add('d-none');
                filterBtns.forEach(btn => {
                    btn.classList.remove('active');
                    if (btn.dataset.filter === 'all') {
                        btn.classList.add('active');
                    }
                });
                updateResults();
            });
        });
    </script>
}