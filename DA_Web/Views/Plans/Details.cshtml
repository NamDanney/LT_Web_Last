@using System.Security.Claims
@model DA_Web.Models.Tour
@{
    ViewData["Title"] = Model.Destination;
    var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
}

@section Styles {
    <link rel="stylesheet" href="~/styles/Plans/DetailsPlans.css" />
}

<!-- HERO SECTION -->
<header class="modern-hero">
    <img src="@Model.Image" alt="@Model.Destination" class="modern-hero__background">
    <div class="modern-hero__overlay"></div>
    <div class="container modern-hero__content">
        <h1 class="modern-hero__title">@Model.Destination</h1>
        <div class="modern-hero__meta">
            <div class="modern-hero__meta-item">
                <i class="bi bi-person-circle"></i>
                <span>@(Model.User?.FullName ?? "Administrator")</span>
        </div>
            <div class="modern-hero__meta-item">
                <i class="bi bi-clock"></i>
                <span>@Model.Duration</span>
                </div>
            <div class="modern-hero__meta-item">
                <i class="bi bi-geo-alt"></i>
                <span>@Model.DepartureFrom</span>
                </div>
            </div>
        </div>
</header>

<!-- MAIN CONTENT -->
<main class="modern-details">
    <div class="container">
        <div class="row g-4">
            <!-- Main Content Column -->
            <div class="col-lg-8">
                <!-- Description Section -->
                <div class="content-card">
                    <h2 class="section-title">Tổng Quan Hành Trình</h2>
                    <div>
                            @Html.Raw(Model.Description)
                    </div>

                    @if (Model.TourHighlights != null && Model.TourHighlights.Any())
                    {
                        <h3 class="mt-4 mb-3">Điểm nổi bật</h3>
                            <ul class="highlight-list">
                                @foreach (var highlight in Model.TourHighlights)
                                {
                                    <li class="highlight-item">
                                    <i class="highlight-icon bi bi-patch-check-fill"></i>
                                    <span class="highlight-text">@highlight.Highlight</span>
                                    </li>
                                }
                            </ul>
                    }

                    @if (Model.TourLocations != null && Model.TourLocations.Any())
                    {
                        <h3 class="mt-4 mb-3">Các điểm đến trong hành trình</h3>
                            <div class="destinations-grid">
                                @foreach (var location in Model.TourLocations.Select(tl => tl.Location).Distinct())
                                {
                                    <a href="@Url.Action("Details", "Locations", new { id = location.Id })" class="destination-card">
                                        <div class="destination-card-header">@location.Name</div>
                                        <div class="destination-card-body">
                                            <small class="text-muted">@location.Type</small>
                                        </div>
                                    </a>
                                }
                            </div>
                    }
                        </div>

                                <!-- Schedule Section -->
                <div class="content-card">
                    <h2 class="section-title">Lịch Trình Chi Tiết</h2>
                    
                    <div class="row g-4">
                        <!-- Timeline Column -->
                        <div class="col-lg-8">
                            <div class="timeline">
                                @if (Model.TourSchedules != null && Model.TourSchedules.Any())
                                {
                                    @foreach (var schedule in Model.TourSchedules.OrderBy(s => s.Day))
                                    {
                                        <div class="timeline-item">
                                            <div class="timeline-content">
                                                <div class="timeline-day">@schedule.Day</div>
                                                <div class="timeline-title">@schedule.Title</div>
                                                @if (schedule.ScheduleActivities != null && schedule.ScheduleActivities.Any())
                                                {
                                                    <div class="timeline-description">
                                                        @foreach (var activity in schedule.ScheduleActivities)
                                                        {
                                                            <p>• @activity.Activity</p>
                    }
                </div>
                                                }
            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-muted">Chưa có thông tin lịch trình chi tiết.</p>
                                }
                            </div>
                        </div>

                        <!-- Map Column -->
                        <div class="col-lg-4">
                            <div class="map-container">
                                <h4 class="mb-3">
                                    <i class="bi bi-map me-2"></i>Bản đồ hành trình
                                </h4>
                                <div id="tour-map" style="height: 400px; width: 100%; border-radius: 12px; overflow: hidden;"></div>
                                
                        @if (Model.TourLocations != null && Model.TourLocations.Any())
                        {
                                    <div class="location-list mt-3">
                                        <h5 class="mb-2">
                                            <i class="bi bi-geo-fill me-2"></i>Các điểm tham quan
                                        </h5>
                                    @{
                                        var uniqueLocations = Model.TourLocations
                                        .Select(tl => tl.Location)
                                        .Distinct()
                                        .ToList();
                                    }
                                    @for (int i = 0; i < uniqueLocations.Count; i++)
                                    {
                                        var location = uniqueLocations[i];
                                            <div class="location-item d-flex align-items-center mb-2 p-2 rounded" data-location-id="@location.Id">
                                                <div class="location-marker me-3">@(i + 1)</div>
                                                <div>
                                                    <div class="fw-medium">@location.Name</div>
                                                @if (!string.IsNullOrEmpty(location.Type))
                                                {
                                                        <small class="text-muted">@location.Type</small>
                                                }
                                            </div>
                                            </div>
                                    }
                            </div>
                        }
                    </div>
                        </div>
                    </div>
                                    </div>

                <!-- Info Section -->
                <div class="content-card">
                    <h2 class="section-title">Thông Tin Chuyến Đi</h2>
                    <div class="info-grid">
                        @if (Model.TourIncludes != null && Model.TourIncludes.Any())
                                    {
                            <div>
                                <h4 class="mb-3"><i class="bi bi-check2-circle text-success me-2"></i>Bao gồm</h4>
                                <ul class="info-list">
                                    @foreach (var item in Model.TourIncludes)
                                                {
                                        <li class="include">
                                            <i class="bi bi-check-circle-fill"></i>
                                            <span>@item.Description</span>
                                        </li>
                                                }
                                </ul>
                                        </div>
                                    }

                        @if (Model.TourExcludes != null && Model.TourExcludes.Any())
                                    {
                            <div>
                                <h4 class="mb-3"><i class="bi bi-x-circle text-danger me-2"></i>Không bao gồm</h4>
                                <ul class="info-list">
                                    @foreach (var item in Model.TourExcludes)
                                            {
                                        <li class="exclude">
                                            <i class="bi bi-x-circle-fill"></i>
                                            <span>@item.Description</span>
                                        </li>
                                            }
                                </ul>
                                        </div>
                                    }
                                </div>

                    @if (Model.TourNotes != null && Model.TourNotes.Any())
                        {
                        <div class="mt-4">
                            <h4 class="mb-3"><i class="bi bi-info-circle text-warning me-2"></i>Lưu ý quan trọng</h4>
                            <ul class="info-list">
                                @foreach (var item in Model.TourNotes)
                                {
                                    <li class="note">
                                        <i class="bi bi-info-circle-fill"></i>
                                        <span>@item.Description</span>
                                    </li>
                                }
                            </ul>
                            </div>
                        }
                </div>
            </div>

            <!-- Sidebar Column -->
            <div class="col-lg-4">
                <div class="sidebar-card">
                    <div class="author-section">
                        @{
                            var authorAvatarPath = "/images/default-avatar.png";
                            if (!string.IsNullOrEmpty(Model.User?.Avatar))
                            {
                                if (Model.User.Avatar.StartsWith("/"))
                                {
                                    authorAvatarPath = Model.User.Avatar;
                                }
                                else if (Model.User.Avatar.StartsWith("uploads/"))
                                    {
                                    authorAvatarPath = "/" + Model.User.Avatar;
                                }
                                else
                                {
                                    authorAvatarPath = $"/uploads/avatars/{Model.User.Avatar}";
                                }
                            }
                        }
                        <img src="@authorAvatarPath" alt="Tác giả" class="author-avatar">
                        <div class="author-name">@(Model.User?.FullName ?? "Administrator")</div>
                        <div class="author-role">Người tạo kế hoạch</div>
                        </div>
                    <div class="action-buttons">
                        @if (Model.UserId.ToString() == userId || User.IsInRole("Admin"))
                    {
                            <a asp-controller="Plans" asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-primary">
                                <i class="bi bi-pencil-square me-2"></i>Chỉnh sửa
                            </a>
                            <a asp-controller="Plans" asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-outline-danger">
                                <i class="bi bi-trash me-2"></i>Xóa kế hoạch
                            </a>
                        }
                        <a href="#" class="btn btn-primary">
                            <i class="bi bi-chat-dots me-2"></i>Liên hệ tác giả
                        </a>
                        </div>
                        </div>
                </div>
            </div>

        <!-- Review Section (Preserved exactly as is) -->
        <hr class="my-5">
        <div class="content-card">
            <h2 class="section-title">Đánh Giá Từ Cộng Đồng</h2>
            
                <div class="review-layout">
                    @{
                        var reviews = Model.Reviews.OrderByDescending(r => r.CreatedAt).ToList();
                        var totalReviews = reviews.Count;
                        var averageRating = totalReviews > 0 ? reviews.Average(r => r.Rating) : 0;
                    }

                    <!-- Cột bên trái: Form đánh giá và danh sách đánh giá -->
                    <div class="review-main-content">
                        <h4 class="review-section-title">Đánh giá từ du khách (@totalReviews đánh giá)</h4>

                        <!-- FORM ĐÁNH GIÁ -->
                        @if (User.Identity.IsAuthenticated)
                        {
                            <div class="review-form-container card mb-4">
                                <div class="card-body">
                                    <div class="d-flex align-items-center mb-3">
                                    @{
                                        var currentUserAvatar = User.FindFirstValue("Avatar");
                                        var currentUserAvatarPath = "/images/default-avatar.png";
                                        if (!string.IsNullOrEmpty(currentUserAvatar))
                                        {
                                            if (currentUserAvatar.StartsWith("/"))
                                            {
                                                currentUserAvatarPath = currentUserAvatar;
                                            }
                                            else if (currentUserAvatar.StartsWith("uploads/"))
                                            {
                                                currentUserAvatarPath = "/" + currentUserAvatar;
                                            }
                                            else
                                            {
                                                currentUserAvatarPath = $"/uploads/avatars/{currentUserAvatar}";
                                            }
                                        }
                                    }
                                    <img src="@currentUserAvatarPath" class="rounded-circle me-3" style="width: 45px; height: 45px; object-fit: cover;" />
                                        <div>
                                            <h6 class="mb-0">Viết đánh giá của bạn</h6>
                                            <span class="text-muted small">Chia sẻ trải nghiệm của bạn với cộng đồng</span>
                                        </div>
                                    </div>
                                    <div id="review-form-result" class="mb-3"></div>

                                    <form id="review-form" novalidate enctype="multipart/form-data">
                                        <input type="hidden" id="tourId" name="TourId" value="@Model.Id" />
                                        <div class="mb-3">
                                            <label class="form-label d-block">Xếp hạng:</label>
                                            <div class="rating-stars">
                                                <i class="bi bi-star" data-value="1"></i><i class="bi bi-star" data-value="2"></i><i class="bi bi-star" data-value="3"></i><i class="bi bi-star" data-value="4"></i><i class="bi bi-star" data-value="5"></i>
                                            </div>
                                            <input type="hidden" id="ratingValue" name="Rating" />
                                        </div>
                                        <div class="mb-3">
                                            <label for="review-comment" class="form-label">Bình luận của bạn:</label>
                                            <textarea id="review-comment" name="Comment" class="form-control" rows="4" placeholder="Chuyến đi này tuyệt vời như thế nào?..." required></textarea>
                                        </div>
                                        <div class="mb-3">
                                            <label for="review-images" class="form-label">Thêm hình ảnh (tối đa 5 ảnh):</label>
                                            <input class="form-control" type="file" id="review-images" name="Images" multiple accept="image/*">
                                            <div id="image-preview-container" class="mt-3"></div>
                                        </div>
                                        <button type="submit" class="btn btn-primary w-100">
                                            <span class="submit-text">Gửi đánh giá</span>
                                            <span class="spinner-border spinner-border-sm ms-2 d-none" role="status" aria-hidden="true"></span>
                                        </button>
                                    </form>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                Vui lòng <a asp-controller="Account" asp-action="Login" asp-route-returnUrl="@Context.Request.Path">đăng nhập</a> để gửi đánh giá của bạn.
                            </div>
                        }

                        <!-- DANH SÁCH ĐÁNH GIÁ -->
                        <div id="review-list">
                            @if (reviews.Any())
                            {
                                foreach (var review in reviews)
                                {
                                <div class="review-item" data-review-id="@review.Id">
                                    <div class="review-header">
                                        <div class="user-info">
                                            @if (!string.IsNullOrEmpty(review.User?.Avatar))
                                            {
                                                var avatarPath = "/images/default-avatar.png";
                                                if (review.User.Avatar.StartsWith("/"))
                                                {
                                                    avatarPath = review.User.Avatar;
                                                }
                                                else if (review.User.Avatar.StartsWith("uploads/"))
                                                {
                                                    avatarPath = "/" + review.User.Avatar;
                                                }
                                                else
                                                {
                                                    avatarPath = $"/uploads/avatars/{review.User.Avatar}";
                                                }
                                                <img src="@avatarPath" alt="@review.User.Username" class="user-avatar">
                                            }
                                            else
                                            {
                                                <div class="user-avatar-placeholder">
                                                    <i class="bi bi-person-circle"></i>
                                                </div>
                                            }
                                            <div class="user-details">
                                                <h6 class="mb-0">@(review.User?.Username ?? "Người dùng ẩn danh")</h6>
                                                <small class="text-muted">@review.CreatedAt.ToString("dd/MM/yyyy")</small>
                                            </div>
                                        </div>
                                        
                                             @{
                                                var currentUserId = ViewBag.CurrentUserId as int? ?? 0;
                                                var showActions = currentUserId > 0 && currentUserId == review.UserId;
                                            }
                                            
                                            @if (showActions)
                                        {
                                            <div class="review-actions">
                                                <button type="button" class="btn btn-sm btn-outline-secondary edit-btn" data-review-id="@review.Id">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-danger delete-btn" data-review-id="@review.Id">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                    
                                    <div class="review-content">
                                        <div class="review-rating">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    <i class="bi @(i <= review.Rating ? "bi-star-fill text-warning" : "bi-star")"></i>
                                                }
                                            </div>
                                        <p class="review-comment">@review.Comment</p>
                                        
                                            @if (review.ReviewImages != null && review.ReviewImages.Any())
                                            {
                                            <div class="review-images">
                                                    @foreach (var img in review.ReviewImages)
                                                    {
                                                    var imagePath = img.ImageUrl;
                                                    if (!imagePath.StartsWith("/"))
                                                    {
                                                        imagePath = "/" + imagePath;
                                                    }
                                                    var cacheBuster = DateTime.Now.Ticks;
                                                    <img src="@(imagePath)?v=@cacheBuster" alt="Review image" class="review-image" onclick="openImageModal(this.src)">
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div id="no-reviews-message" class="empty-reviews">
                                    <i class="bi bi-chat-left-dots"></i>
                                    <p>Chưa có đánh giá nào. Hãy là người đầu tiên chia sẻ trải nghiệm của bạn!</p>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Cột bên phải: Thống kê đánh giá -->
                    <div class="review-summary-sidebar">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Tổng quan đánh giá</h5>
                                <div class="average-rating-display">
                                    <span class="rating-value">@averageRating.ToString("0.0")</span>
                                    <div class="rating-stars-display">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (averageRating >= i)
                                            {
                                                <i class="bi bi-star-fill"></i>
                                            }
                                            else if (averageRating > i - 1)
                                            {
                                                <i class="bi bi-star-half"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-star"></i>
                                            }
                                        }
                                    </div>
                                    <span class="total-reviews-count">dựa trên @totalReviews đánh giá</span>
                                </div>

                                <div class="rating-breakdown">
                                    @for (int i = 5; i >= 1; i--)
                                    {
                                        var count = reviews.Count(r => r.Rating == i);
                                        var percentage = totalReviews > 0 ? (double)count / totalReviews * 100 : 0;
                                        <div class="rating-bar-row">
                                            <div class="star-label">@i <i class="bi bi-star-fill"></i></div>
                                            <div class="progress">
                                                <div class="progress-bar" role="progressbar" style="width: @percentage%;" aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100"></div>
                                            </div>
                                            <div class="star-count">@count</div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
    </div>
</main>

<!-- Modal chỉnh sửa đánh giá -->
<div class="modal fade" id="editReviewModal" tabindex="-1" aria-labelledby="editReviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editReviewModalLabel">Chỉnh sửa đánh giá</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="edit-review-form-result" class="mb-3"></div>
                <form id="edit-review-form" novalidate enctype="multipart/form-data">
                    <input type="hidden" name="TourId" value="@Model.Id" />
                    
                    <div class="mb-3">
                        <label class="form-label d-block">Xếp hạng:</label>
                        <div class="rating-stars" id="edit-rating-stars">
                            <i class="bi bi-star" data-value="1"></i>
                            <i class="bi bi-star" data-value="2"></i>
                            <i class="bi bi-star" data-value="3"></i>
                            <i class="bi bi-star" data-value="4"></i>
                            <i class="bi bi-star" data-value="5"></i>
                        </div>
                        <input type="hidden" id="edit-rating-value" name="Rating" />
                    </div>
                    
                    <div class="mb-3">
                        <label for="edit-review-comment" class="form-label">Bình luận của bạn:</label>
                        <textarea id="edit-review-comment" name="Comment" class="form-control" rows="4" placeholder="Chuyến đi này tuyệt vời như thế nào?..." required></textarea>
                    </div>
                    
                    <div class="mb-3">
                        <label for="edit-review-images" class="form-label">Thêm hình ảnh mới (tối đa 5 ảnh, để trống nếu muốn giữ ảnh cũ):</label>
                        <input class="form-control" type="file" id="edit-review-images" name="Images" multiple accept="image/*">
                        <div id="edit-image-preview-container" class="mt-3"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" id="update-review-btn">
                    <span class="submit-text">Cập nhật đánh giá</span>
                    <span class="spinner-border spinner-border-sm ms-2 d-none" role="status" aria-hidden="true"></span>
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize Map
            initializeMap();
            
            // Review functionality starts here
            // --- LIGHTBOX MODAL FOR IMAGES ---
            createImageLightbox();

            // --- REVIEW LOGIC ---
            const reviewForm = document.getElementById('review-form');
            if (reviewForm) {
                const ratingValueInput = reviewForm.querySelector('#ratingValue');
                const imageInput = document.getElementById('review-images');
                const previewContainer = document.getElementById('image-preview-container');
                const submitButton = reviewForm.querySelector('button[type="submit"]');
                let selectedFiles = [];

                // Star rating logic
                reviewForm.querySelectorAll('.rating-stars i').forEach(star => {
                    star.addEventListener('click', () => {
                        ratingValueInput.value = star.dataset.value;
                        reviewForm.querySelectorAll('.rating-stars i').forEach(s => s.classList.remove('selected'));
                        for (let i = 0; i < star.dataset.value; i++) {
                            reviewForm.querySelectorAll('.rating-stars i')[i].classList.add('selected');
                        }
                    });
                });

                // Image preview logic
                imageInput.addEventListener('change', function() {
                    if (this.files.length > 5) {
                        alert("Bạn chỉ có thể chọn tối đa 5 ảnh.");
                        this.value = "";
                        return;
                    }
                    selectedFiles = Array.from(this.files);
                    renderImagePreviews();
                });

                function renderImagePreviews() {
                    previewContainer.innerHTML = '';
                    if (selectedFiles.length > 0) {
                        previewContainer.innerHTML = '<div class="image-preview-grid"></div>';
                        const grid = previewContainer.querySelector('.image-preview-grid');

                        selectedFiles.forEach((file, index) => {
                            const reader = new FileReader();
                            reader.onload = e => {
                                const div = document.createElement('div');
                                div.className = 'image-preview-item';
                                div.innerHTML = `
                                    <img src="${e.target.result}" alt="${file.name}">
                                    <button type="button" class="remove-image-btn" data-index="${index}">
                                        <i class="bi bi-x"></i>
                                    </button>
                                `;
                                grid.appendChild(div);
                            };
                            reader.readAsDataURL(file);
                        });
                    }
                }

                previewContainer.addEventListener('click', function(e) {
                    if (e.target.closest('.remove-image-btn')) {
                        const btn = e.target.closest('.remove-image-btn');
                        const indexToRemove = parseInt(btn.dataset.index);
                        selectedFiles.splice(indexToRemove, 1);
                        const dataTransfer = new DataTransfer();
                        selectedFiles.forEach(file => dataTransfer.items.add(file));
                        imageInput.files = dataTransfer.files;
                        renderImagePreviews();
                    }
                });

                // Form submission
                reviewForm.addEventListener('submit', function (e) {
                    e.preventDefault();
                    const formData = new FormData(reviewForm);

                    if (!formData.get("Rating")) {
                        document.getElementById('review-form-result').innerHTML = `<div class="alert alert-danger">Vui lòng chọn số sao đánh giá.</div>`;
                        return;
                    }

                    setLoadingState(true);

                    fetch('/api/Review', {
                        method: 'POST',
                        body: formData,
                    })
                    .then(res => {
                        if (res.redirected || res.status === 401 || res.status === 403) {
                            window.location.href = '/Account/Login?ReturnUrl=' + window.location.pathname;
                            throw new Error("Authentication required");
                        }
                        return res.json();
                    })
                    .then(data => {
                        if (data.success) {
                            document.getElementById('review-form-result').innerHTML = `<div class="alert alert-success">Đánh giá của bạn đã được gửi thành công!</div>`;
                            // Reload trang để hiển thị đúng ảnh từ database
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        } else {
                            const errorMessages = Array.isArray(data.errors) ? data.errors.join('<br>') : data.message;
                            document.getElementById('review-form-result').innerHTML = `<div class="alert alert-danger">${errorMessages}</div>`;
                        }
                    })
                    .catch(error => {
                        if (error.message !== "Authentication required") {
                            document.getElementById('review-form-result').innerHTML = `<div class="alert alert-danger">Đã có lỗi xảy ra khi gửi đánh giá.</div>`;
                        }
                        console.error('Submit Error:', error);
                    })
                    .finally(() => setLoadingState(false));
                });

                function setLoadingState(isLoading) {
                    const submitText = submitButton.querySelector('.submit-text');
                    const spinner = submitButton.querySelector('.spinner-border');
                    if(isLoading) {
                        submitButton.disabled = true;
                        submitText.textContent = 'Đang gửi...';
                        spinner.classList.remove('d-none');
                    } else {
                        submitButton.disabled = false;
                        submitText.textContent = 'Gửi đánh giá';
                        spinner.classList.add('d-none');
                    }
                }
            }

            function addNewReviewToDom(review) {
                const reviewList = document.getElementById('review-list');
                const noReviewsMsg = document.getElementById('no-reviews-message');
                if (noReviewsMsg) noReviewsMsg.remove();

                const reviewCard = document.createElement('div');
                reviewCard.className = 'review-item';
                reviewCard.setAttribute('data-review-id', review.Id || review.id);

                let starsHtml = '';
                const rating = review.Rating || review.rating;
                for (let i = 1; i <= 5; i++) {
                    starsHtml += `<i class="bi ${i <= rating ? 'bi-star-fill text-warning' : 'bi-star'}"></i>`;
                }

                let imagesHtml = '';
                const images = review.Images || review.images;
                if(images && images.length > 0) {
                    imagesHtml += '<div class="review-images">';
                    images.forEach(url => {
                        const imageUrl = url.startsWith('/') ? url : '/' + url;
                        imagesHtml += `<img src="${imageUrl}" alt="Review image" class="review-image" onclick="openImageModal('${imageUrl}')">`;
                    });
                    imagesHtml += '</div>';
                }

                const createdAt = review.CreatedAt || review.createdAt;
                const formattedDate = new Date(createdAt).toLocaleDateString('vi-VN');
                const userName = review.UserName || review.userName;
                const userAvatar = review.UserAvatar || review.userAvatar;
                const comment = review.Comment || review.comment;
                const avatarUrl = userAvatar ? (userAvatar.startsWith('/') ? userAvatar : '/' + userAvatar) : '/images/default-avatar.png';

                reviewCard.innerHTML = `
                    <div class="review-header">
                        <div class="user-info">
                            <img src="${avatarUrl}" alt="${userName}" class="user-avatar">
                            <div class="user-details">
                                <h6 class="mb-0">${userName}</h6>
                                <small class="text-muted">${formattedDate}</small>
                            </div>
                        </div>
                    </div>
                    <div class="review-content">
                        <div class="review-rating">${starsHtml}</div>
                        <p class="review-comment">${comment}</p>
                        ${imagesHtml}
                    </div>`;

                reviewList.prepend(reviewCard);
            }

            function createImageLightbox() {
                const lightboxHtml = `
                    <div id="image-lightbox" class="lightbox-overlay" style="display: none;">
                        <div class="lightbox-container">
                            <button class="lightbox-close" onclick="closeLightbox()">
                                <i class="bi bi-x-lg"></i>
                            </button>
                            <img id="lightbox-image" src="" alt="Review image">
                        </div>
                    </div>`;
                document.body.insertAdjacentHTML('beforeend', lightboxHtml);
            }

            window.openImageModal = function(imageSrc) {
                const lightbox = document.getElementById('image-lightbox');
                const lightboxImage = document.getElementById('lightbox-image');
                lightboxImage.src = imageSrc;
                lightbox.style.display = 'flex';
                document.body.style.overflow = 'hidden';
            };

            window.closeLightbox = function() {
                const lightbox = document.getElementById('image-lightbox');
                lightbox.style.display = 'none';
                document.body.style.overflow = 'auto';
            };

            let currentEditingReviewId = null;

            document.addEventListener('click', function(e) {
                if (e.target.closest('.edit-btn')) {
                    e.preventDefault();
                    const reviewId = e.target.closest('.edit-btn').getAttribute('data-review-id');
                    openEditModal(reviewId);
                }
                
                if (e.target.closest('.delete-btn')) {
                    e.preventDefault();
                    const reviewId = e.target.closest('.delete-btn').getAttribute('data-review-id');
                    confirmDeleteReview(reviewId);
                }
            });

            function openEditModal(reviewId) {
                currentEditingReviewId = reviewId;
                
                fetch(`/api/Review/${reviewId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const review = data.data;
                            document.getElementById('edit-review-comment').value = review.Comment || review.comment || '';
                            document.getElementById('edit-rating-value').value = review.Rating || review.rating || 0;
                            setStars('edit-rating-stars', review.Rating || review.rating || 0);
                            const modal = new bootstrap.Modal(document.getElementById('editReviewModal'));
                            modal.show();
                        } else {
                            alert('Không thể tải thông tin đánh giá: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Đã xảy ra lỗi khi tải thông tin đánh giá: ' + error.message);
                    });
            }

            function confirmDeleteReview(reviewId) {
                if (confirm('Bạn có chắc chắn muốn xóa đánh giá này không?')) {
                    deleteReview(reviewId);
                }
            }

            function deleteReview(reviewId) {
                fetch(`/api/Review/${reviewId}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const reviewElement = document.querySelector(`[data-review-id="${reviewId}"]`);
                        if (reviewElement) reviewElement.remove();
                        alert('Đánh giá đã được xóa thành công!');
                        window.location.reload();
                    } else {
                        alert('Lỗi khi xóa đánh giá: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Đã xảy ra lỗi khi xóa đánh giá: ' + error.message);
                });
            }

            function setStars(containerId, rating) {
                const container = document.getElementById(containerId);
                if (container) {
                    const stars = container.querySelectorAll('i');
                    stars.forEach((star, index) => {
                        if (index < rating) {
                            star.className = 'bi bi-star-fill';
                        } else {
                            star.className = 'bi bi-star';
                }
            });
                }
            }

            const editStars = document.querySelectorAll('#edit-rating-stars i');
            editStars.forEach((star, index) => {
                star.addEventListener('click', function() {
                    const rating = this.getAttribute('data-value');
                    document.getElementById('edit-rating-value').value = rating;
                    setStars('edit-rating-stars', rating);
                });
                
                star.addEventListener('mouseenter', function() {
                    const rating = parseInt(this.getAttribute('data-value'));
                    editStars.forEach((s, i) => {
                        s.classList.remove('hover-highlight');
                        if (i < rating) {
                            s.classList.add('hover-highlight');
                        }
                    });
                });
                
                star.addEventListener('mouseleave', function() {
                    editStars.forEach(s => s.classList.remove('hover-highlight'));
                });
            });

            document.getElementById('update-review-btn').addEventListener('click', function() {
                if (!currentEditingReviewId) {
                    alert('Không tìm thấy ID đánh giá để cập nhật');
                    return;
                }
                
                const form = document.getElementById('edit-review-form');
                const formData = new FormData(form);
                
                if (!formData.get('Rating')) {
                    alert('Vui lòng chọn số sao đánh giá');
                    return;
                }
                
                fetch(`/api/Review/${currentEditingReviewId}`, {
                    method: 'PUT',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Đánh giá đã được cập nhật thành công!');
                        const modal = bootstrap.Modal.getInstance(document.getElementById('editReviewModal'));
                        if (modal) modal.hide();
                        currentEditingReviewId = null;
                        window.location.reload();
                    } else {
                        alert('Lỗi khi cập nhật đánh giá: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Đã xảy ra lỗi khi cập nhật đánh giá: ' + error.message);
                });
            });
            
            // Map initialization function
            function initializeMap() {
                if (typeof L === 'undefined') {
                    console.log('Leaflet not loaded');
                    return;
                }
                
                // Get locations data
                @{
                    var locationData = Model.TourLocations?.Select(tl => new { 
                        Id = tl.Location.Id, 
                        Name = tl.Location.Name, 
                        Type = tl.Location.Type, 
                        Latitude = tl.Location.Latitude, 
                        Longitude = tl.Location.Longitude 
                    }).Distinct().ToList();
                }
                const locations = @Html.Raw(Json.Serialize(locationData ?? Enumerable.Empty<object>()));
                
                if (!locations || locations.length === 0) {
                    document.getElementById('tour-map').innerHTML = '<div class="d-flex align-items-center justify-content-center h-100 text-muted"><i class="bi bi-map me-2"></i>Không có dữ liệu bản đồ</div>';
                    return;
                }
                
                // Calculate center and bounds
                let validLocations = locations.filter(loc => loc.longitude && loc.latitude);
                if (validLocations.length === 0) {
                    document.getElementById('tour-map').innerHTML = '<div class="d-flex align-items-center justify-content-center h-100 text-muted"><i class="bi bi-map me-2"></i>Không có tọa độ hợp lệ</div>';
                    return;
                }
                
                // Initialize map with Vietnam center as default
                const map = L.map('tour-map').setView([16.0471, 108.2068], 6);
                
                // Add OpenStreetMap tiles
                L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                }).addTo(map);
                
                // Create bounds and add markers
                const group = new L.featureGroup();
                
                validLocations.forEach((location, index) => {
                    // Create custom marker
                    const markerHtml = `
                        <div style="
                            background: #2563eb;
                            color: white;
                            width: 32px;
                            height: 32px;
                            border-radius: 50%;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            font-weight: 600;
                            font-size: 14px;
                            border: 3px solid white;
                            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
                            cursor: pointer;
                        ">${index + 1}</div>
                    `;
                    
                    const customIcon = L.divIcon({
                        html: markerHtml,
                        iconSize: [32, 32],
                        iconAnchor: [16, 16],
                        popupAnchor: [0, -16],
                        className: 'custom-marker'
                    });
                    
                    // Create marker with popup
                    const marker = L.marker([location.latitude, location.longitude], { icon: customIcon })
                        .addTo(map)
                        .bindPopup(`
                            <div style="font-family: 'Inter', sans-serif; min-width: 200px;">
                                <h6 style="margin: 0 0 5px 0; font-weight: 600; color: #2563eb;">${location.name}</h6>
                                ${location.type ? `<p style="margin: 0; color: #666; font-size: 13px;"><i class="bi bi-geo-alt me-1"></i>${location.type}</p>` : ''}
                            </div>
                        `);
                    
                    group.addLayer(marker);
                    
                    // Add click handler for location highlighting
                    marker.on('click', function() {
                        const locationItem = document.querySelector(`[data-location-id="${location.id}"]`);
                        if (locationItem) {
                            // Remove previous highlights
                            document.querySelectorAll('.location-item').forEach(item => {
                                item.classList.remove('active');
                                item.style.background = '';
                                item.style.borderColor = '';
                            });
                            
                            // Highlight current item
                            locationItem.classList.add('active');
                            locationItem.style.background = 'var(--accent-color)';
                            locationItem.style.borderColor = 'var(--primary-color)';
                            
                            // Scroll to item
                            locationItem.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                        }
                    });
                });
                
                // Fit map to show all markers
                if (validLocations.length > 1) {
                    map.fitBounds(group.getBounds(), { padding: [20, 20] });
                } else {
                    map.setView([validLocations[0].latitude, validLocations[0].longitude], 13);
                }
                
                // Add location item click handlers
                document.querySelectorAll('.location-item').forEach((item, index) => {
                    item.addEventListener('click', () => {
                        const location = validLocations[index];
                        if (location && location.longitude && location.latitude) {
                            map.setView([location.latitude, location.longitude], 15, {
                                animate: true,
                                duration: 1
                            });
                            
                            // Remove previous highlights
                            document.querySelectorAll('.location-item').forEach(item => {
                                item.classList.remove('active');
                                item.style.background = '';
                                item.style.borderColor = '';
                            });
                            
                            // Highlight clicked item
                            item.classList.add('active');
                            item.style.background = 'var(--accent-color)';
                            item.style.borderColor = 'var(--primary-color)';
                        }
                    });
                });
            }
        });
    </script>
}